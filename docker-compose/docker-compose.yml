version: '3.8'
services:

  history:
    image: dojot/history:development
    restart: always
    depends_on:
      - mongodb
    environment:
      FALCON_SETTINGS_MODULE: 'history.settings.docker'
      DOJOT_MANAGEMENT_USER: 'history'
      LOG_LEVEL: INFO
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  persister:
    image: dojot/persister:development
    restart: always
    depends_on:
      - mongodb
      - auth
      - kafka
      - data-broker
    environment:
      FALCON_SETTINGS_MODULE: 'history.settings.docker'
      DOJOT_MANAGEMENT_USER: 'persister'
      KAFKA_GROUP_ID: 'persister-group'
      LOG_LEVEL: INFO
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  mongodb:
    image: dojot/mongo:3.2
    restart: always
    user: "mongodb"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongodb:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'
    volumes:
      - mongodb-volume:/data/db
      - mongodb-cfg-volume:/data/configdb

  gui:
    image: dojot/gui:development
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  gui-v2:
    image: dojot/gui-v2:development
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  data-broker:
    image: dojot/data-broker:development
    restart: always
    depends_on:
      - kafka
      - data-broker-redis
      - auth
    environment:
      DOJOT_MANAGEMENT_USER: 'data-broker'
      KAFKA_GROUP_ID: 'data-broker-group'
      SERVICE_PORT: ${DATA_BROKER_SERVICE_PORT}
      DATA_BROKER_URL: 'http://data-broker:${DATA_BROKER_SERVICE_PORT}'
      LOG_LEVEL: 'info'
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_REPLICATION_FACTOR: 1
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  data-broker-redis:
    image: dojot/redis:5.0.5-alpine3.10
    restart: always
    volumes:
      - data-broker-redis-volume:/data
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  image-manager:
    image: dojot/image-manager:development
    restart: always
    depends_on:
      - postgres
      - minio
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'
    environment:
      # TODO: The following should be unique for each environment
      S3ACCESSKEY: 9HEODSF6WQN5EZ39DM7Z
      S3SECRETKEY: fT5nAgHR9pkj0yYsBdc4p+PPq6ArjshcPdz0HA6W
      DBHOST: postgres
      DBUSER: imgm
      DBPASS: imgm

  minio:
    image: dojot/minio:2019.09.20
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'
    environment:
      # TODO: The following should be unique for each environment
      MINIO_ACCESS_KEY: 9HEODSF6WQN5EZ39DM7Z
      MINIO_SECRET_KEY: fT5nAgHR9pkj0yYsBdc4p+PPq6ArjshcPdz0HA6W
    command: server /data
    volumes:
      - minio-volume:/data

  device-manager:
    image: dojot/device-manager:development
    restart: always
    environment:
      # TODO: Fill these env variables with suitable values
      DEV_MNGR_CRYPTO_PASS: kamehameHA
      DEV_MNGR_CRYPTO_IV: 1234567890123456
      DEV_MNGR_CRYPTO_SALT: shuriken
      DBHOST: postgres
      DBUSER: devm
      DBPASS: devm
      LOG_LEVEL: INFO
    depends_on:
      - postgres
      - kafka
      - data-broker
      - device-manager-redis
    depends_on:
      postgres:
        condition: service_healthy
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  device-manager-redis:
    image: dojot/redis:5.0.5-alpine3.10
    restart: always
    volumes:
      - device-manager-redis-volume:/data
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  postgres:
    image: dojot/postgres:9.5.21-alpine
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    volumes:
      - ./postgres/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh:Z
      - postgres-volume:/var/lib/postgresql/data
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  # Prepare database, Bootstrap the database
  kong-migrations:
    image: dojot/kong:development
    command: kong migrations bootstrap
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: "kong"
      KONG_PG_DATABASE: kong
      KONG_LOG_LEVEL: info
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  # Run any new migrations and Finish running any pending migrations after 'up'.
  kong-migrations-up:
    image:  dojot/kong:development
    command: kong migrations up && kong migrations finish
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: "kong"
      KONG_PG_DATABASE: kong
      KONG_LOG_LEVEL: info
    restart: on-failure
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  apigw:
    image: dojot/kong:development
    depends_on:
      postgres:
        condition: service_healthy
      kong-migrations:
        condition: service_started
      kong-migrations-up:
        condition: service_started
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: postgres
      KONG_PG_USER: kong
      KONG_PG_DATABASE: kong
      KONG_PG_PASSWORD: kong
      KONG_LOG_LEVEL: info
      # To enable HTTPs external, it is necessary to configure public certificates
      # issued by a public CA, such as lets encrypt in KONG_SSL_CERT.
      # KONG_SSL_CERT_KEY: /certs/example-external.key
      # KONG_SSL_CERT: /certs/example-external.crt
      # To enable HTTPs internal with mutual authentication, it is necessary to configure public certificates
      # issued by a EJBCA internal from dojot in KONG_NGINX_PROXY_PROXY_SSL_CERTIFICATE.
      # KONG_NGINX_PROXY_PROXY_SSL_CERTIFICATE_KEY: /certs/example-internal.key
      # KONG_NGINX_PROXY_PROXY_SSL_CERTIFICATE: /certs/example-internal.crt
      # Root cerficate from internal CA
      # KONG_NGINX_PROXY_PROXY_SSL_TRUSTED_CERTIFICATE: /certs/root-ca-internal.crt
      # KONG_NGINX_PROXY_PROXY_SSL_VERIFY: "on"
      # KONG_NGINX_PROXY_PROXY_SSL_VERIFY_DEPTH: "2"
    ports:
      - "8000:8000/tcp"
      # Proxy listen to HTTPS traffic (8443). services and routes must be configured to use the https protocol
      # Each service must have its certificate with Subject Alternative Name generated by dojot's EJBCA.
      #- "8443:8443/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    # Exposes certificates
    #volumes:
    #  - ./kong/certificates/:/certs/:Z
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  kong-config:
    image: dojot/appropriate-curl
    entrypoint: /opt/kong.config.sh
    restart: on-failure
    depends_on:
      - apigw
    volumes:
      - ./kong/kong.config.sh:/opt/kong.config.sh:Z
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'


  auth:
    image: dojot/auth:development
    restart: always
    depends_on:
      - apigw
      - postgres
      - auth-redis
    environment:
      AUTH_DB_HOST: "postgres"
      AUTH_DB_USER: "auth"
      AUTH_DB_PWD:  "auth"
      AUTH_KONG_URL: "http://apigw:8001"
      AUTH_CACHE_HOST: "auth-redis"
      # This is used to select the type of cache to be used.
      # Allowed values are "redis" or "nocache"
      AUTH_CACHE_NAME: "redis"
      DOJOT_MANAGEMENT_USER: 'auth'
      KAFKA_GROUP_ID: 'auth-group'
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  auth-redis:
    image: dojot/redis:5.0.5-alpine3.10
    restart: always
    volumes:
      - auth-redis-volume:/data
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  flowbroker:
    image: dojot/flowbroker:development
    restart: always
    environment:
      DEPLOY_ENGINE: "docker"
      FLOWBROKER_NETWORK: ${FLOWBROKER_NETWORK}
      DOJOT_MANAGEMENT_USER: 'flowbroker'
      KAFKA_GROUP_ID: 'flowbroker-group'
      LOG_LEVEL: 'info'
    depends_on:
      - rabbitmq
      - kafka
      - mongodb
      - auth
      - flowbroker-context-manager
      - flowbroker-redis
    networks:
      - default
      - flowbroker
    volumes:
      - flowbroker-volume:/data
      - /var/run/docker.sock:/var/run/docker.sock:Z
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  flowbroker-redis:
    image: dojot/redis:5.0.5-alpine3.10
    restart: always
    volumes:
      - flowbroker-redis-volume:/data
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  flowbroker-context-manager:
    image: dojot/flowbroker-context-manager:development
    restart: always
    environment:
      ZOOKEEPER_HOST: zookeeper
      ZOOKEEPER_PORT: 2181
      ZEROMQ_PORT: 5556
      HOLD_LOCK_TIMEOUT: 10000
      WAIT_LOCK_TIMEOUT: 30000
    depends_on:
      - zookeeper
    networks:
      - default
      - flowbroker
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  rabbitmq:
    image: dojot/rabbitmq:3.7-alpine
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://rabbitmq:15672"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - rabbitmq-volume:/var/lib/rabbitmq
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  zookeeper:
    image: "confluentinc/cp-zookeeper:5.5.0"
    restart: always
    environment:
      ZOOKEEPER_REPLICAS: "1"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_ELECTION_PORT: 3888
      ZOOKEEPER_SERVER_PORT: 2888
      ZOOKEEPER_HEAP_SIZE: "2G"
      ZOOKEEPER_INIT_LIMIT: "5"
      ZOOKEEPER_LOG_LEVEL: "INFO"
      ZOOKEEPER_MAX_CLIENT_CNXNS: "100"
      ZOOKEEPER_MAX_SESSION_TIMEOUT: "40000"
      ZOOKEEPER_MIN_SESSION_TIMEOUT: "4000"
      ZOOKEEPER_PURGE_INTERVAL: "0"
      ZOOKEEPER_SNAP_RETAIN_COUNT: "3"
      ZOOKEEPER_SYNC_LIMIT: "10"
      ZOOKEEPER_TICK_TIME: "2000"
    volumes:
      - zookeeper-volume:/var/lib/zookeeper/data
      - zookeeper-log-volume:/var/lib/zookeeper/log
      - zookeeper-secrets-volume:/etc/zookeeper/secrets
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  kafka:
    image: confluentinc/cp-kafka:5.5.0
    depends_on:
      - zookeeper
    restart: always
    hostname: "kafka"
    environment:
      KAFKA_BROKER_ID: "1"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://:9092"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
      KAFKA_LOG_RETENTION_MINUTES: "30"
      KAFKA_LOG_SEGMENT_BYTES: "262144000"
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: "30000"
    volumes:
      - kafka-volume:/var/lib/kafka/data
      - kafka-secrets-volume:/etc/kafka/secrets
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  x509-identity-mgmt:
    image: dojot/x509-identity-mgmt:development
    depends_on:
      - x509-ejbca
      - postgres
      - mongodb
      - kafka
    restart: always
    environment:
      NODE_ENV: production
      X509IDMGMT_CERTIFICATE_BELONGSTO_APPLICATION: '["iotagent-mqtt", "v2k-bridge", "k2v-bridge", "iotagent-http"]'
      X509IDMGMT_MONGO_CONN_URI: "mongodb://mongodb:27017/x509-identity-mgmt"
      X509IDMGMT_EJBCA_HEALTHCHECK_URL: "http://x509-ejbca:8080/ejbca/publicweb/healthcheck/ejbcahealth"
      X509IDMGMT_EJBCA_WSDL: "https://x509-ejbca:8443/ejbca/ejbcaws/ejbcaws?wsdl"
      X509IDMGMT_CERTIFICATE_CHECK_SUBJECTDN: "true"
      X509IDMGMT_EJBCA_FORCECRLRENEW: "true"
      # ROARR_LOG: "true" # healthcheck is using 'Roarr' to implement logging.
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9000/health"]
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 2m
    volumes:
      - "ejbca-client-tls-volume:/opt/tls"
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  x509-ejbca: # this service cannot be called 'ejbca'
    image: dojot/ejbca:development
    depends_on:
      - postgres
    restart: always
    hostname: "x509-ejbca" # The 'hostname' must have the same name as the 'service'
                           # and cannot be called 'ejbca' so as not to conflict with
                           # the ejbca's internal End-Entity (hidden)
    domainname: "" # the 'domainname' must remain empty unless the
                   # service name contains periods (such as an FQDN)
    environment:
      DATABASE_JDBC_URL: jdbc:postgresql://postgres:5432/ejbca?characterEncoding=UTF-8
      DATABASE_USER: ejbca
      DATABASE_PASSWORD: ejbca
      EJBCA_EXTERNAL_ACCESS: "true" # to make the Wildfly server visible on the x509-identity-mgmt
      EJBCA_SERVER_CERT_REGEN: "true" # Used to force the generation of a new certificate for the server
      # EJBCA_LOCK_FILE_TIMEOUT: "0" # Used to break the '.lock' file
      # EJBCA_ADMIN_USER: "true" # Access to the EJBCA web interface is useful for debugging purposes
      EJBCA_CRL_EXPIRE_PERIOD_DEVICES_CA: "1m"
      EJBCA_CRL_ISSUE_INTERVAL_DEVICES_CA: "1m"
      EJBCA_CRL_OVERLAP_TIME_DEVICES_CA: "1m"
      EJBCA_DELTA_CRL_PERIOD_DEVICES_CA: "1m"
      EJBCA_CRL_EXPIRE_PERIOD_INTERNAL_CA: "1m"
      EJBCA_CRL_ISSUE_INTERVAL_INTERNAL_CA: "1m"
      EJBCA_CRL_OVERLAP_TIME_INTERNAL_CA: "1m"
      EJBCA_DELTA_CRL_PERIOD_INTERNAL_CA: "1m"
      EJBCA_CRL_UPDATER_SERVICE_INTERVAL_VALUE: 1
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8080/ejbca/publicweb/healthcheck/ejbcahealth"]
      interval: 30s
      timeout: 10s
      retries: 2
      start_period: 2m
    volumes:
      - "ejbca-volume:/mnt/persistent"
      - "ejbca-client-tls-volume:/opt/tls"
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  kafka-ws:
    image: dojot/kafka-ws:development
    depends_on:
      - kafka
      - kafka-ws-redis
    environment:
      KAFKA_WS_SERVER_JWT_EXP_TIME: "true"
      KAFKA_WS_REDIS_HOST: kafka-ws-redis
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  kafka-ws-redis:
    image: dojot/redis:6.0.4-alpine3.11
    restart: always
    volumes:
      - kafka-ws-redis-volume:/data
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  acl-redis:
    image: dojot/redis:6.0.4-alpine3.11
    restart: always
    volumes:
      - acl-redis-volume:/data
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  certificate-acl:
    image: dojot/certificate-acl:development
    depends_on:
      - acl-redis
      - kafka
      - x509-identity-mgmt
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  data-manager:
    image: dojot/data-manager:development
    restart: always
    depends_on:
      - flowbroker
      - device-manager
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  backstage:
    image: dojot/backstage:development
    restart: always
    depends_on:
      - postgres
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  cron:
    image: dojot/cron:development
    depends_on:
      - kafka
      - data-broker
      - auth
      - mongodb
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'
  
  iotagent-http-cert-sidecar:
    image: dojot/cert-sidecar:development
    depends_on:
      - x509-identity-mgmt
    environment:
      CERT_SC_APP_SIDECAR_TO: 'iotagent-http'
      CERT_SC_LOG_CONSOLE_LEVEL: 'debug'
      CERT_SC_CERTS_HOSTNAMES: '["iotagent-http", "localhost"]'
      HOSTNAME: iotagent-http
      CERT_SC_CERTS_FILES_BASEPATH: /certs
      CERT_SC_CERTS_FILES_CA: ca.crt
      CERT_SC_CERTS_FILES_CERT: iotagent-http.crt
      CERT_SC_CERTS_FILES_KEY: iotagent-http.key
      CERT_SC_CERTS_FILES_CRL: ca.crl
      CERT_SC_CRON_CRL_TIME: "0 */1 * * * *"
    volumes:
      - iotagent-http-cert-side-volume:/certs
    restart: always
    logging:
      driver: json-file
      options:
        max-size: 20m
        max-file: '5'

  iotagent-http:
    image: iotagent-http
    depends_on:
      - kafka
      - data-broker
      - auth
      - iotagent-http-cert-sidecar
      - device-manager

    ports:
      - 8080:3124
    restart: always
    environment:
      SERVER_PORT_HTTPS: 3124
      SERVER_PORT_HTTP: 3123
      HTTP_TLS_SECURE_CERT: "/certs/iotagent-http.crt"
      HTTP_TLS_SECURE_KEY: "/certs/iotagent-http.key"
      HTTP_TLS_CA_CERT: "/certs/ca.crt"
      HTTP_TLS_CRL_CERT: "/certs/ca.crl"
      HTTP_CERT_DIRECTORY: "/certs"
      HTTP_TLS_SECURE_ENABLED: "false"
    volumes:
      - iotagent-http-cert-side-volume:/certs
    logging:
      driver: json-file
      options:
        max-size: 100m

volumes:
  ejbca-volume:
  ejbca-client-tls-volume:
  postgres-volume:
  mongodb-volume:
  mongodb-cfg-volume:
  minio-volume:
  rabbitmq-volume:
  zookeeper-volume:
  zookeeper-log-volume:
  zookeeper-secrets-volume:
  kafka-volume:
  kafka-secrets-volume:
  auth-redis-volume:
  flowbroker-volume:
  flowbroker-redis-volume:
  data-broker-redis-volume:
  device-manager-redis-volume:
  kafka-ws-redis-volume:
  influxdb-volume:
  acl-redis-volume:
  iotagent-http-cert-side-volume:

networks:
  flowbroker:
    name: ${FLOWBROKER_NETWORK}
